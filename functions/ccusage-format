#!/usr/bin/env zsh

# Display formatting function for zsh-ccusage plugin

# Source color utilities
source "${0:A:h}/../lib/colors.zsh"

# Format cost and percentage for display
# Input: cost (numeric), percentage (numeric), is_stale (boolean)
# Output: Formatted string with colors
function ccusage_format_display() {
    local cost=${1:-0.00}
    local percentage=${2:-0}
    local is_stale=${3:-false}
    
    # Get terminal width for compact mode detection
    # Try multiple methods to ensure we get the width
    local term_width
    if [[ -n "$COLUMNS" ]]; then
        term_width=$COLUMNS
    elif command -v tput >/dev/null 2>&1; then
        term_width=$(tput cols 2>/dev/null)
    else
        # Fallback to stty if available
        term_width=$(stty size 2>/dev/null | cut -d' ' -f2)
    fi
    
    # Default to 80 if we couldn't detect
    term_width=${term_width:-80}
    
    # Apply color based on percentage
    local color=$(ccusage_get_color "$percentage")
    
    # Add stale indicator if data is from cache
    local stale_indicator=""
    if [[ "$is_stale" == "true" ]]; then
        # Use a subtle indicator (asterisk) to show stale data
        stale_indicator="*"
    fi
    
    # Get custom format or use defaults
    local format="${CCUSAGE_DISPLAY_FORMAT:-}"
    
    # Build the display string
    if [[ -n "$format" ]]; then
        # User-defined format
        # Replace placeholders: $cost, $percentage
        local display="${format//\$cost/\$$cost}"
        display="${display//\$percentage/${percentage}%}"
        echo -n "${display}${stale_indicator}"
    elif (( term_width < 80 )); then
        # Compact format for narrow terminals
        # Format: $45.23|35%
        echo -n "\$${cost}|${percentage}%${stale_indicator}"
    else
        # Default format with brackets and spacing for wider terminals
        # Format: [$45.23 | 35%]
        echo -n "[\$${cost} | ${percentage}%]${stale_indicator}"
    fi
}