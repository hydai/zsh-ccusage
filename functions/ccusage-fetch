#!/usr/bin/env zsh

# Data fetching functions for zsh-ccusage plugin


# Fetches cost data from ccusage CLI for active blocks
# Input: none
# Output: JSON string or error message
function ccusage_fetch_active_block() {
    # Check if npx is available using centralized function
    if ! ccusage_check_ccstat; then
        return 1
    fi
    
    # Execute ccusage command with timeout
    local timeout_seconds=5
    local output
    local exit_code
    
    # Run command with timeout to prevent hanging
    output=$(ccusage_run_with_timeout $timeout_seconds ccstat --quiet blocks --active --json)
    exit_code=$?
    
    # Use centralized error handler
    ccusage_handle_fetch_error $exit_code "$output"
    return $?
}

# Fetches daily usage data from ccusage CLI
# Input: date in YYYYMMDD format (optional, defaults to today)
# Output: JSON string or error message
function ccusage_fetch_daily() {
    local date=${1:-$(ccusage_get_today)}
    
    # Check if npx is available using centralized function
    if ! ccusage_check_ccstat; then
        return 1
    fi
    
    # Execute ccusage command with timeout
    local timeout_seconds=5
    local output
    local exit_code
    
    # Run command with timeout to prevent hanging
    # Convert YYYYMMDD to YYYY-MM-DD format for ccstat
    local formatted_date="${date:0:4}-${date:4:2}-${date:6:2}"
    output=$(ccusage_run_with_timeout $timeout_seconds ccstat --quiet daily --since "$formatted_date" --json)
    exit_code=$?
    
    # Use centralized error handler
    ccusage_handle_fetch_error $exit_code "$output"
    return $?
}

# Fetches monthly usage data from ccusage CLI
# Input: none
# Output: JSON string or error message
function ccusage_fetch_monthly() {
    # Check if npx is available using centralized function
    if ! ccusage_check_ccstat; then
        return 1
    fi
    
    # Execute ccusage command with timeout
    local timeout_seconds=5
    local output
    local exit_code
    
    # Run command with timeout to prevent hanging
    # Get current month in YYYY-MM format for ccstat
    local current_month=$(date +%Y-%m)
    output=$(ccusage_run_with_timeout $timeout_seconds ccstat --quiet monthly --since "$current_month" --json)
    exit_code=$?
    
    # Use centralized error handler
    ccusage_handle_fetch_error $exit_code "$output"
    return $?
}
# Fetches daily cost data for cost mode
# Input: date in YYYYMMDD format (optional, defaults to today)
# Output: JSON string or error message
function ccusage_fetch_daily_cost() {
    local date=${1:-$(ccusage_get_today)}
    
    # Check if npx is available using centralized function
    if ! ccusage_check_ccstat; then
        return 1
    fi
    
    # Execute ccusage command with timeout
    local timeout_seconds=5
    local output
    local exit_code
    
    # Run command with timeout to prevent hanging
    # Convert YYYYMMDD to YYYY-MM-DD format for ccstat
    local formatted_date="${date:0:4}-${date:4:2}-${date:6:2}"
    output=$(ccusage_run_with_timeout $timeout_seconds ccstat --quiet daily --since "$formatted_date" --json)
    exit_code=$?
    
    # Use centralized error handler
    ccusage_handle_fetch_error $exit_code "$output"
    return $?
}

# Fetches monthly cost data for cost mode
# Input: month in YYYYMM format (optional, defaults to current month)
# Output: JSON string or error message
function ccusage_fetch_monthly_cost() {
    local month=${1:-$(ccusage_get_current_month)}
    local month_start="${month}01"
    
    # Check if npx is available using centralized function
    if ! ccusage_check_ccstat; then
        return 1
    fi
    
    # Execute ccusage command with timeout
    local timeout_seconds=5
    local output
    local exit_code
    
    # Run command with timeout to prevent hanging
    # Convert YYYYMM01 to YYYY-MM format for ccstat
    local formatted_month="${month:0:4}-${month:2:2}"
    output=$(ccusage_run_with_timeout $timeout_seconds ccstat --quiet monthly --since "$formatted_month" --json)
    exit_code=$?
    
    # Use centralized error handler
    ccusage_handle_fetch_error $exit_code "$output"
    return $?
}